import openpyxl
from fastapi import FastAPI, HTTPException, Depends, Request
from fastapi.responses import JSONResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session
from pathlib import Path
from typing import List
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, Border, Side
from openpyxl.utils import get_column_letter
from docx import Document
import shutil, os
import random
import time
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã
from app.models import (
    get_db, create_tables,
    BookCreate, BookUpdate, BookOut,
    ReaderCreate, ReaderUpdate, ReaderOut,
    BookIssueCreate, BookIssueOut,
    book_store, reader_store, book_issue_store
)

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="LibTool", version="2.0.0")

# –ü—É—Ç–∏ –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º
BASE_DIR = Path(__file__).resolve().parent  # –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è (app)
static_dir = BASE_DIR / 'static'
templates_dir = BASE_DIR / 'templates'

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
static_dir.mkdir(exist_ok=True, parents=True)
templates_dir.mkdir(exist_ok=True, parents=True)

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory=static_dir), name="static")
templates = Jinja2Templates(directory=templates_dir)


# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
def cleanup_temp_certificates(max_age_hours=24):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"""
    try:
        temp_dir = templates_dir / "temp_certificates"
        if not temp_dir.exists():
            return

        current_time = time.time()
        deleted_count = 0

        for file_path in temp_dir.glob("certificate_book_*.docx"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–∞
            if current_time - file_path.stat().st_mtime > max_age_hours * 3600:
                file_path.unlink()
                deleted_count += 1
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {file_path.name}")

        if deleted_count > 0:
            print(f"‚úÖ –û—á–∏—â–µ–Ω–æ {deleted_count} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")


# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@app.on_event("startup")
def startup_event():
    create_tables()

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    cleanup_temp_certificates()

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    try:
        db = next(get_db())
        updated_count = book_issue_store.check_overdue_issues(db)
        print(f"üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –ø—Ä–æ—Å—Ä–æ—á–∫–∏: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –≤—ã–¥–∞—á")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–∫: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:")
    print(f"BASE_DIR: {BASE_DIR}")
    print(f"static_dir: {static_dir} (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {static_dir.exists()})")
    print(f"templates_dir: {templates_dir} (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {templates_dir.exists()})")


# –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –≤—ã–¥–∞—á –≤ Excel - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
@app.get("/api/issues/export-excel")
async def export_issues_to_excel(db: Session = Depends(get_db)):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –≤—ã–¥–∞—á –≤ Excel —Ñ–∞–π–ª"""
    try:
        print("üîç –ó–∞–ø—Ä–æ—Å –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç –≤—ã–¥–∞—á –≤ Excel...")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–¥–∞—á–∏
        issues = book_issue_store.list_issues(db)
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(issues)} –≤—ã–¥–∞—á –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")

        # –°–æ–∑–¥–∞–µ–º Excel workbook
        wb = Workbook()
        ws = wb.active
        ws.title = "–í—ã–¥–∞—á–∏ –∫–Ω–∏–≥"

        # –°—Ç–∏–ª–∏
        header_font = Font(bold=True, size=12)
        normal_font = Font(size=10)
        border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
        center_align = Alignment(horizontal='center', vertical='center')

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [
            'ID', '–ö–Ω–∏–≥–∞', '–ß–∏—Ç–∞—Ç–µ–ª—å', '–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏',
            '–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π –≤–æ–∑–≤—Ä–∞—Ç', '–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç', '–°—Ç–∞—Ç—É—Å'
        ]

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = header_font
            cell.alignment = center_align
            cell.border = border

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for row, issue in enumerate(issues, 2):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
            status_text = {
                'issued': '–í—ã–¥–∞–Ω–∞',
                'returned': '–í–æ–∑–≤—Ä–∞—â–µ–Ω–∞',
                'overdue': '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞'
            }.get(issue.status, issue.status)

            ws.cell(row=row, column=1, value=issue.id).border = border
            ws.cell(row=row, column=2, value=issue.book_name).border = border
            ws.cell(row=row, column=3, value=issue.reader_name).border = border
            ws.cell(row=row, column=4, value=issue.issue_date.strftime('%d.%m.%Y')).border = border
            ws.cell(row=row, column=5, value=issue.planned_return_date.strftime('%d.%m.%Y')).border = border

            actual_return = issue.actual_return_date.strftime('%d.%m.%Y') if issue.actual_return_date else '-'
            ws.cell(row=row, column=6, value=actual_return).border = border
            ws.cell(row=row, column=7, value=status_text).border = border

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        column_widths = [8, 40, 30, 12, 15, 15, 12]
        for i, width in enumerate(column_widths, 1):
            ws.column_dimensions[get_column_letter(i)].width = width

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
        signature_row = len(issues) + 4

        # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        ws.cell(row=signature_row, column=1, value="")

        # –ü–æ–¥–ø–∏—Å—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
        signature_row += 1
        ws.merge_cells(f'A{signature_row}:G{signature_row}')
        ws.cell(row=signature_row, column=1, value="–î–∏—Ä–µ–∫—Ç–æ—Ä –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: _________________________")
        ws.cell(row=signature_row, column=1).font = Font(size=12, bold=True)
        ws.cell(row=signature_row, column=1).alignment = Alignment(horizontal='right')

        signature_row += 1
        ws.merge_cells(f'A{signature_row}:G{signature_row}')
        ws.cell(row=signature_row, column=1, value="–î–∞—Ç–∞: _________________________")
        ws.cell(row=signature_row, column=1).font = Font(size=12)
        ws.cell(row=signature_row, column=1).alignment = Alignment(horizontal='right')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_dir = templates_dir / "temp_exports"
        temp_dir.mkdir(exist_ok=True)

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"–≤—ã–¥–∞—á–∏_–∫–Ω–∏–≥_{timestamp}.xlsx"
        file_path = temp_dir / filename

        wb.save(file_path)
        print(f"‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {file_path}")
        print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_path.stat().st_size} –±–∞–π—Ç")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
        if not file_path.exists():
            raise Exception("–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        return FileResponse(
            path=file_path,
            filename=filename,
            media_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel: {str(e)}")
        import traceback
        print(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel: {str(e)}")
# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.get("/")
async def index(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})


# API –¥–ª—è –∫–Ω–∏–≥
@app.get("/api/books", response_model=List[BookOut])
async def get_books(db: Session = Depends(get_db)):
    try:
        books = book_store.list_books(db)
        return books
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥: {str(e)}")


@app.get("/api/books/{book_id}", response_model=BookOut)
async def get_book(book_id: int, db: Session = Depends(get_db)):
    book = book_store.get_book(db, book_id)
    if not book:
        raise HTTPException(404, "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    return book


@app.post("/api/books", response_model=BookOut)
async def create_book(book: BookCreate, db: Session = Depends(get_db)):
    try:
        return book_store.create_book(db, book)
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–∏–≥–∏: {str(e)}")


@app.put("/api/books/{book_id}", response_model=BookOut)
async def update_book(book_id: int, book: BookUpdate, db: Session = Depends(get_db)):
    updated_book = book_store.update_book(db, book_id, book)
    if not updated_book:
        raise HTTPException(404, "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    return updated_book


@app.delete("/api/books/{book_id}")
async def delete_book(book_id: int, db: Session = Depends(get_db)):
    success = book_store.delete_book(db, book_id)
    if not success:
        raise HTTPException(404, "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    return {"ok": True}


# API –¥–ª—è —á–∏—Ç–∞—Ç–µ–ª–µ–π
@app.get("/api/readers", response_model=List[ReaderOut])
async def get_readers(db: Session = Depends(get_db)):
    try:
        readers = reader_store.list_readers(db)
        return readers
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∏—Ç–∞—Ç–µ–ª–µ–π: {str(e)}")


@app.post("/api/readers", response_model=ReaderOut)
async def create_reader(reader: ReaderCreate, db: Session = Depends(get_db)):
    try:
        return reader_store.create_reader(db, reader)
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∏—Ç–∞—Ç–µ–ª—è: {str(e)}")


@app.put("/api/readers/{reader_id}", response_model=ReaderOut)
async def update_reader(reader_id: int, reader: ReaderUpdate, db: Session = Depends(get_db)):
    updated_reader = reader_store.update_reader(db, reader_id, reader)
    if not updated_reader:
        raise HTTPException(404, "–ß–∏—Ç–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return updated_reader


@app.delete("/api/readers/{reader_id}")
async def delete_reader(reader_id: int, db: Session = Depends(get_db)):
    success = reader_store.delete_reader(db, reader_id)
    if not success:
        raise HTTPException(404, "–ß–∏—Ç–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return {"ok": True}


# API –¥–ª—è –≤—ã–¥–∞—á–∏/–≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–Ω–∏–≥
@app.get("/api/issues", response_model=List[BookIssueOut])
async def get_issues(db: Session = Depends(get_db)):
    try:
        issues = book_issue_store.list_issues(db)
        return issues
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–¥–∞—á: {str(e)}")


@app.post("/api/issues", response_model=BookIssueOut)
async def issue_book(issue: BookIssueCreate, db: Session = Depends(get_db)):
    try:
        return book_issue_store.issue_book(db, issue)
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –∫–Ω–∏–≥–∏: {str(e)}")


@app.post("/api/issues/{issue_id}/return")
async def return_book(issue_id: int, db: Session = Depends(get_db)):
    success = book_issue_store.return_book(db, issue_id)
    if not success:
        raise HTTPException(404, "–í—ã–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞")
    return {"ok": True}


# API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –≤—ã–¥–∞—á
@app.post("/api/issues/check-overdue")
async def check_overdue_issues(db: Session = Depends(get_db)):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –≤—ã–¥–∞—á"""
    try:
        updated_count = book_issue_store.check_overdue_issues(db)
        return {
            "updated_count": updated_count,
            "message": f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –≤—ã–¥–∞—á"
        }
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–∫: {str(e)}")


# API –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–¥–∞—á–∏ –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π
@app.post("/api/issues/{issue_id}/mark-overdue")
async def mark_issue_overdue(issue_id: int, db: Session = Depends(get_db)):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–¥–∞—á—É –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é"""
    try:
        success = book_issue_store.mark_issue_overdue(db, issue_id)
        if not success:
            raise HTTPException(400, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–¥–∞—á—É –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é")

        return {"ok": True, "message": "–í—ã–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è"}
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏: {str(e)}")


# API –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
@app.get("/api/reports/stats")
async def get_stats(db: Session = Depends(get_db)):
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–Ω–∏–≥–∞–º
        books = book_store.list_books(db)
        total_books = len(books)
        available_books = len([b for b in books if b.status == "available"])

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∏—Ç–∞—Ç–µ–ª—è–º
        readers = reader_store.list_readers(db)
        total_readers = len(readers)
        active_readers = len([r for r in readers if r.status == "active"])

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ã–¥–∞—á–∞–º
        issues = book_issue_store.list_issues(db)
        total_issues = len(issues)
        current_issues = len([i for i in issues if i.status == "issued"])
        overdue_issues = len([i for i in issues if i.status == "overdue"])
        returned_issues = len([i for i in issues if i.status == "returned"])

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∂–∞–Ω—Ä–∞–º
        genre_stats = {}
        for book in books:
            genre = book.genre or "–ë–µ–∑ –∂–∞–Ω—Ä–∞"
            genre_stats[genre] = genre_stats.get(genre, 0) + 1

        return {
            "books": {
                "total": total_books,
                "available": available_books
            },
            "readers": {
                "total": total_readers,
                "active": active_readers
            },
            "issues": {
                "total": total_issues,
                "current": current_issues,
                "overdue": overdue_issues,
                "returned": returned_issues
            },
            "genres": genre_stats
        }
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–Ω–∏–≥–∏
# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
@app.get("/api/certificate/{book_id}")
async def generate_certificate(book_id: int, db: Session = Depends(get_db)):
    try:
        print(f"üîç –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è –∫–Ω–∏–≥–∏ ID: {book_id}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
        book = book_store.get_book(db, book_id)
        if not book:
            raise HTTPException(404, "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        template_path = templates_dir / "certificate_book_50.docx"
        if not template_path.exists():
            raise HTTPException(500, "–®–∞–±–ª–æ–Ω —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        cert_number = random.randint(10000, 99999)

        # –§–∏–∫—Å–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        current_date = datetime.now()
        day = current_date.day
        month = current_date.month
        year = current_date.year

        # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
        month_names = [
            "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
            "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
        ]
        month_name = month_names[month - 1]

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        full_date = f"¬´{day}¬ª {month_name} {year} –≥."

        temp_dir = templates_dir / "temp_certificates"
        temp_dir.mkdir(exist_ok=True)
        output_path = temp_dir / f"certificate_book_{book_id}_{cert_number}.docx"

        # –ö–æ–ø–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω
        shutil.copy(template_path, output_path)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc = Document(output_path)

        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ñ—Ä–∞–∑–∞–º
        for paragraph in doc.paragraphs:
            text = paragraph.text

            # –ó–∞–º–µ–Ω—è–µ–º –Ω–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            if "__________" in text and "‚Ññ" in text:
                text = text.replace("__________", str(cert_number))

            # –ó–∞–º–µ–Ω—è–µ–º –¥–∞—Ç—É
            if "¬´___¬ª __________ 20___ –≥." in text:
                text = text.replace("¬´___¬ª __________ 20___ –≥.", full_date)

            # –ó–∞–º–µ–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
            if "____________________________________________" in text and "–ù–∞–∑–≤–∞–Ω–∏–µ:" in text:
                text = text.replace("____________________________________________", book.name)
            elif "_______________________________________________" in text and "–ê–≤—Ç–æ—Ä:" in text:
                text = text.replace("_______________________________________________", book.author)
            elif "________________________________________________" in text and "–ñ–∞–Ω—Ä:" in text:
                text = text.replace("________________________________________________", book.genre or "–ù–µ —É–∫–∞–∑–∞–Ω")
            elif "______________________________" in text and "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤:" in text:
                text = text.replace("______________________________", str(book.count))

            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ
            if text != paragraph.text:
                paragraph.clear()
                paragraph.add_run(text)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    for paragraph in cell.paragraphs:
                        text = paragraph.text

                        if "_____________________" in text and "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π" in text:
                            text = text.replace("_____________________", "–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                        elif "______________________________" in text and "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ" in text:
                            text = text.replace("______________________________", "–∫–Ω–∏–≥–∞ –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
                        elif "___________________________________________" in text and "–ü—Ä–æ–≤–µ—Ä–∏–ª:" in text:
                            text = text.replace("___________________________________________", "–ò–≤–∞–Ω–æ–≤–∞ –ê.–°.")
                        elif "___________________________________________" in text and "–£—Ç–≤–µ—Ä–¥–∏–ª:" in text:
                            text = text.replace("___________________________________________", "–ü–µ—Ç—Ä–æ–≤ –ò.–í.")
                        elif "¬´___¬ª __________ 20___ –≥." in text:
                            text = text.replace("¬´___¬ª __________ 20___ –≥.", full_date)
                        elif "__________________________________________" in text and "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:" in text:
                            text = text.replace("__________________________________________",
                                                "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –≥–æ—Ä–æ–¥—Å–∫–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞")
                        elif "__________________________________________________" in text and "–ê–¥—Ä–µ—Å:" in text:
                            text = text.replace("__________________________________________________",
                                                "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ß–∏—Ç–∞—Ç–µ–ª—å—Å–∫–∞—è, –¥. 1")
                        elif "________________________________________________" in text and "–¢–µ–ª–µ—Ñ–æ–Ω:" in text:
                            text = text.replace("________________________________________________",
                                                "+7 (495) 123-45-67")

                        if text != paragraph.text:
                            paragraph.clear()
                            paragraph.add_run(text)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        doc.save(output_path)

        return FileResponse(
            path=output_path,
            filename=f"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç_–∫–∞—á–µ—Å—Ç–≤–∞_{book.name.replace(' ', '_')}.docx",
            media_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {str(e)}")
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {str(e)}")

# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
@app.get("/api/rules/download")
async def download_rules():
    """–°–∫–∞—á–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF"""
    try:
        # –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
        rules_path = static_dir / "rules.pdf"

        if not rules_path.exists():
            rules_path = templates_dir / "rules.pdf"

        if not rules_path.exists():
            raise HTTPException(404, "–§–∞–π–ª –ø—Ä–∞–≤–∏–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

        return FileResponse(
            path=rules_path,
            filename="–ü—Ä–∞–≤–∏–ª–∞_–±–∏–±–ª–∏–æ—Ç–µ–∫–∏.pdf",
            media_type='application/pdf'
        )

    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª: {str(e)}")


@app.on_event("startup")
def startup_event():
    create_tables()

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    try:
        updated_count = book_issue_store.check_overdue_issues(get_db())
        print(f"üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –ø—Ä–æ—Å—Ä–æ—á–∫–∏: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –≤—ã–¥–∞—á")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–∫: {e}")


# Health check
@app.get("/api/health")
async def health_check(db: Session = Depends(get_db)):
    try:
        books = book_store.list_books(db)
        return {
            "status": "healthy",
            "database": "connected",
            "books_count": len(books)
        }
    except Exception as e:
        raise HTTPException(500, f"Database error: {str(e)}")