// static/js/app.js
class LibToolApp {
    constructor() {
        this.books = [];
        this.readers = [];
        this.issues = [];
        this.currentPage = 'books';
        this.genresChart = null;
        this.bookSortOrder = 'default';

        this.init();
    }

    init() {
        this.bindEvents();
        this.showPage('books');
        this.showNotification('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', 'success');
    }

    bindEvents() {
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.showPage(e.target.dataset.page);
            });
        });

        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        this.setupButtonHandlers();

        // –§–æ—Ä–º—ã
        this.setupFormHandlers();

        // –§–∏–ª—å—Ç—Ä—ã
        this.setupFilterHandlers();

        console.log('‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    setupButtonHandlers() {
        const buttons = {
            'btn-new-book': () => this.openBookModal(),
            'btn-new-reader': () => this.openReaderModal(),
            'btn-new-issue': () => this.openIssueModal(),
            'btn-refresh-stats': () => this.loadReports(),
            'btn-export-excel': () => this.exportToExcel(),
            'book-cancel': () => this.closeBookModal(),
            'reader-cancel': () => this.closeReaderModal(),
            'issue-cancel': () => this.closeIssueModal(),
            'book-delete': () => this.deleteBookHandler(),
            'reader-delete': () => this.deleteReaderHandler()
        };

        Object.entries(buttons).forEach(([id, handler]) => {
            document.getElementById(id)?.addEventListener('click', handler);
        });

        // –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª
        const rulesBtn = document.getElementById('downloadRules');
        if (rulesBtn) {
            rulesBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.downloadRules();
            });
        } else {
            this.createTempRulesButton();
        }
    }

    setupFormHandlers() {
        const forms = {
            'book-form': (e) => this.saveBook(e),
            'reader-form': (e) => this.saveReader(e),
            'issue-form': (e) => this.saveIssue(e)
        };

        Object.entries(forms).forEach(([id, handler]) => {
            document.getElementById(id)?.addEventListener('submit', handler);
        });
    }

    setupFilterHandlers() {
        const filters = {
            'search': () => this.renderBooks(),
            'filter-status': () => this.renderBooks(),
            'search-readers': () => this.renderReaders(),
            'filter-status-readers': () => this.renderReaders(),
            'filter-status-issues': () => this.renderIssues()
        };

        Object.entries(filters).forEach(([id, handler]) => {
            document.getElementById(id)?.addEventListener('input', handler);
            document.getElementById(id)?.addEventListener('change', handler);
        });
    }

    // –£—Ç–∏–ª–∏—Ç—ã
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.remove();
        }, 4000);
    }

    showLoading(page, show) {
        const loading = document.getElementById(`${page}-loading`);
        const container = document.getElementById(`${page}-container`);

        if (loading) loading.style.display = show ? 'block' : 'none';
        if (container) container.style.display = show ? 'none' : 'block';
    }

    async apiCall(url, options = {}) {
        try {
            const response = await fetch(url, {
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                },
                ...options
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('API Call Failed:', error);
            throw error;
        }
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    showPage(page) {
        console.log(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${page}`);

        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        ['page', 'nav-btn', 'page-action', 'filter-group'].forEach(className => {
            document.querySelectorAll(`.${className}`).forEach(element => {
                if (element?.classList) {
                    element.classList.remove('active');
                }
            });
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const elements = {
            page: document.getElementById(`${page}-page`),
            navButton: document.querySelector(`[data-page="${page}"]`),
            pageActions: document.getElementById(`${page}-actions`),
            pageFilters: document.getElementById(`${page}-filters`)
        };

        Object.entries(elements).forEach(([type, element]) => {
            if (element?.classList) {
                element.classList.add('active');
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const titles = {
            'books': 'üìñ –ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥',
            'readers': 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∏—Ç–∞—Ç–µ–ª—è–º–∏',
            'issues': 'üîÑ –í—ã–¥–∞—á–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫–Ω–∏–≥',
            'reports': 'üìä –û—Ç—á–µ—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
        };

        const pageTitle = document.getElementById('page-title');
        if (pageTitle) {
            pageTitle.textContent = titles[page] || '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞';
        }

        this.currentPage = page;
        this.loadPageData();
    }

    async loadPageData() {
        const loaders = {
            'books': () => this.loadBooks(),
            'readers': () => this.loadReaders(),
            'issues': () => this.loadIssues(),
            'reports': () => this.loadReports()
        };

        if (loaders[this.currentPage]) {
            await loaders[this.currentPage]();
        }
    }

    // –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    async loadData(type) {
        try {
            this.showLoading(type, true);
            this[type] = await this.apiCall(`/api/${type}`);
            this[`render${type.charAt(0).toUpperCase() + type.slice(1)}`]();
        } catch (error) {
            this.showNotification(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${type}: ${error.message}`, 'error');
        } finally {
            this.showLoading(type, false);
        }
    }

    async saveData(type, formData, id = null) {
        const url = id ? `/api/${type}/${id}` : `/api/${type}`;
        const method = id ? 'PUT' : 'POST';

        try {
            await this.apiCall(url, {
                method: method,
                body: JSON.stringify(formData)
            });

            this[`close${type.charAt(0).toUpperCase() + type.slice(1)}Modal`]();
            await this[`load${type.charAt(0).toUpperCase() + type.slice(1)}`]();
            this.showNotification(id ? '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã' : '–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã', 'success');

        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message, 'error');
        }
    }

    async deleteData(type, id) {
        if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç ${type}?`)) return;

        try {
            await this.apiCall(`/api/${type}/${id}`, { method: 'DELETE' });
            await this[`load${type.charAt(0).toUpperCase() + type.slice(1)}`]();
            this.showNotification('–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã', 'success');
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + error.message, 'error');
        }
    }

    // –ö–Ω–∏–≥–∏
    async loadBooks() { await this.loadData('books'); }
    async loadReaders() { await this.loadData('readers'); }
    async loadIssues() { await this.loadData('issues'); }

    renderBooks() {
        const container = document.getElementById('books-container');
        if (!container) return;

        const searchTerm = document.getElementById('search')?.value.toLowerCase() || '';
        const statusFilter = document.getElementById('filter-status')?.value || '';

        let filteredBooks = this.books.filter(book => {
            const matchesSearch = book.name.toLowerCase().includes(searchTerm) ||
                                book.author.toLowerCase().includes(searchTerm);
            const matchesStatus = !statusFilter || book.status === statusFilter;
            return matchesSearch && matchesStatus;
        });

        filteredBooks = this.sortBooks(filteredBooks);
        this.renderBooksTableView(container, filteredBooks);
    }

    sortBooks(books) {
        const sortMethods = {
            'count_asc': (a, b) => a.count - b.count,
            'count_desc': (a, b) => b.count - a.count,
            'default': () => 0
        };

        return [...books].sort(sortMethods[this.bookSortOrder] || sortMethods.default);
    }

    setBookSortOrder(order) {
        this.bookSortOrder = order;
        this.renderBooks();
    }

    renderBooksTableView(container, books) {
        if (!books.length) {
            container.innerHTML = '<div class="text-center">–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }

        const headers = ['ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ê–≤—Ç–æ—Ä', '–ñ–∞–Ω—Ä', '–ö–æ–ª-–≤–æ', '–°—Ç–∞—Ç—É—Å', '–î–µ–π—Å—Ç–≤–∏—è'];

        let html = `
            <div class="table-container">
                <div class="table-header">
                    <div class="sort-controls">
                        <label>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É:</label>
                        <select id="book-sort" onchange="app.setBookSortOrder(this.value)">
                            <option value="default" ${this.bookSortOrder === 'default' ? 'selected' : ''}>–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é</option>
                            <option value="count_asc" ${this.bookSortOrder === 'count_asc' ? 'selected' : ''}>–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é</option>
                            <option value="count_desc" ${this.bookSortOrder === 'count_desc' ? 'selected' : ''}>–ü–æ —É–±—ã–≤–∞–Ω–∏—é</option>
                        </select>
                    </div>
                </div>
                <table class="table">
                    <thead><tr>${headers.map(h => `<th>${h}</th>`).join('')}</tr></thead>
                    <tbody>
        `;

        books.forEach(book => {
            html += `
                <tr>
                    <td>${book.id}</td>
                    <td><strong>${this.escapeHtml(book.name)}</strong></td>
                    <td>${this.escapeHtml(book.author)}</td>
                    <td>${this.escapeHtml(book.genre || '-')}</td>
                    <td>${book.count}</td>
                    <td class="status-${book.status}">${this.getBookStatusText(book.status)}</td>
                    <td>
                        <div class="table-actions">
                            <button class="btn success small" onclick="app.downloadCertificate(${book.id})" title="–°–∫–∞—á–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç">
                                üìÑ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
                            </button>
                            <button class="btn secondary small" onclick="app.editBook(${book.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                                ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                            </button>
                            <button class="btn danger small" onclick="app.deleteBook(${book.id})" title="–£–¥–∞–ª–∏—Ç—å">
                                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                            </button>
                        </div>
                    </td>
                </tr>
            `;
        });

        html += '</tbody></table></div>';
        container.innerHTML = html;
    }

    getBookStatusText(status) {
        const statusMap = {
            'available': '–î–æ—Å—Ç—É–ø–Ω–æ',
            'issued': '–í—ã–¥–∞–Ω–æ'
        };
        return statusMap[status] || status;
    }

    async downloadCertificate(bookId) {
        try {
            this.showNotification('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...', 'info');
            const response = await fetch(`/api/certificate/${bookId}`);

            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞');

            await this.downloadFile(response, `certificate_book_${bookId}.docx`);
            this.showNotification('–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω', 'success');
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: ' + error.message, 'error');
        }
    }

    // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ (–æ–±—â–∏–π –º–µ—Ç–æ–¥)
    async downloadFile(response, defaultFilename) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;

        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ—Ç–≤–µ—Ç–∞
        const contentDisposition = response.headers.get('content-disposition');
        let filename = defaultFilename;

        if (contentDisposition) {
            const filenameMatch = contentDisposition.match(/filename="(.+)"/);
            if (filenameMatch) filename = filenameMatch[1];
        }

        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
    }

    async downloadRules() {
        try {
            this.showNotification('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø—Ä–∞–≤–∏–ª...', 'info');
            const response = await fetch('/api/rules/download');

            if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª: ${response.status}`);

            await this.downloadFile(response, '–ü—Ä–∞–≤–∏–ª–∞_–±–∏–±–ª–∏–æ—Ç–µ–∫–∏.pdf');
            this.showNotification('–ü—Ä–∞–≤–∏–ª–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω—ã', 'success');
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª: ' + error.message, 'error');
        }
    }

    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω—ã (–æ–±—â–∏–µ –º–µ—Ç–æ–¥—ã)
    openModal(type, data = null) {
        const modal = document.getElementById(`modal-${type}`);
        const title = document.getElementById(`modal-${type}-title`);
        const deleteBtn = document.getElementById(`${type}-delete`);

        if (data) {
            title.textContent = `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ${this.getEntityName(type)}`;
            this.fillForm(`${type}-form`, data);
            deleteBtn?.classList.remove('hidden');
        } else {
            title.textContent = `–î–æ–±–∞–≤–∏—Ç—å ${this.getEntityName(type)}`;
            document.getElementById(`${type}-form`).reset();
            document.getElementById(`${type}-id`).value = '';
            deleteBtn?.classList.add('hidden');
        }

        modal.classList.remove('hidden');
    }

    closeModal(type) {
        document.getElementById(`modal-${type}`).classList.add('hidden');
    }

    getEntityName(type) {
        const names = {
            'book': '–∫–Ω–∏–≥—É',
            'reader': '—á–∏—Ç–∞—Ç–µ–ª—è',
            'issue': '–≤—ã–¥–∞—á—É'
        };
        return names[type] || type;
    }

    fillForm(formId, data) {
        Object.keys(data).forEach(key => {
            const element = document.getElementById(`${formId.split('-')[0]}-${key}`);
            if (element) element.value = data[key];
        });
    }

    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–Ω–∏–≥
    openBookModal(book = null) { this.openModal('book', book); }
    closeBookModal() { this.closeModal('book'); }

    async editBook(bookId) {
        try {
            const book = await this.apiCall(`/api/books/${bookId}`);
            this.openBookModal(book);
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥–∏: ' + error.message, 'error');
        }
    }

    async saveBook(event) {
        event.preventDefault();

        const formData = {
            name: document.getElementById('book-name').value.trim(),
            author: document.getElementById('book-author').value.trim(),
            genre: document.getElementById('book-genre').value.trim(),
            count: parseInt(document.getElementById('book-count').value)
        };

        if (!formData.name || !formData.author) {
            this.showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏', 'error');
            return;
        }

        const bookId = document.getElementById('book-id').value;
        await this.saveData('books', formData, bookId);
    }

    async deleteBook(bookId) { await this.deleteData('books', bookId); }
    deleteBookHandler() {
        const bookId = document.getElementById('book-id').value;
        if (bookId) this.deleteBook(parseInt(bookId));
    }

    // –ß–∏—Ç–∞—Ç–µ–ª–∏
    renderReaders() {
        const container = document.getElementById('readers-container');
        if (!container) return;

        const searchTerm = document.getElementById('search-readers')?.value.toLowerCase() || '';
        const statusFilter = document.getElementById('filter-status-readers')?.value || '';

        const filteredReaders = this.readers.filter(reader => {
            const matchesSearch = reader.full_name.toLowerCase().includes(searchTerm);
            const matchesStatus = !statusFilter || reader.status === statusFilter;
            return matchesSearch && matchesStatus;
        });

        this.renderReadersTableView(container, filteredReaders);
    }

    renderReadersTableView(container, readers) {
        if (!readers.length) {
            container.innerHTML = '<div class="text-center">–ß–∏—Ç–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }

        const headers = ['–§–ò–û', '–ö–æ–Ω—Ç–∞–∫—Ç—ã', '–ê–¥—Ä–µ—Å', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ö–Ω–∏–≥ –Ω–∞ —Ä—É–∫–∞—Ö', '–°—Ç–∞—Ç—É—Å', '–î–µ–π—Å—Ç–≤–∏—è'];

        let html = `
            <div class="table-container">
                <table class="table">
                    <thead><tr>${headers.map(h => `<th>${h}</th>`).join('')}</tr></thead>
                    <tbody>
        `;

        readers.forEach(reader => {
            html += `
                <tr>
                    <td><strong>${this.escapeHtml(reader.full_name)}</strong></td>
                    <td>
                        ${reader.phone ? `üìû ${this.escapeHtml(reader.phone)}<br>` : ''}
                        ${reader.email ? `üìß ${this.escapeHtml(reader.email)}` : ''}
                    </td>
                    <td>${this.escapeHtml(reader.address || '-')}</td>
                    <td>${new Date(reader.registration_date).toLocaleDateString('ru-RU')}</td>
                    <td>${reader.books_count}</td>
                    <td class="status-${reader.status}">${reader.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}</td>
                    <td>
                        <div class="table-actions">
                            <button class="btn secondary small" onclick="app.editReader(${reader.id})">
                                ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                            </button>
                            <button class="btn danger small" onclick="app.deleteReader(${reader.id})">
                                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                            </button>
                        </div>
                    </td>
                </tr>
            `;
        });

        html += '</tbody></table></div>';
        container.innerHTML = html;
    }

    openReaderModal(reader = null) { this.openModal('reader', reader); }
    closeReaderModal() { this.closeModal('reader'); }

    editReader(readerId) {
        const reader = this.readers.find(r => r.id === readerId);
        if (reader) {
            this.openReaderModal(reader);
        } else {
            this.showNotification('–ß–∏—Ç–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        }
    }

    async saveReader(event) {
        event.preventDefault();

        const formData = {
            full_name: document.getElementById('reader-name').value.trim(),
            phone: document.getElementById('reader-phone').value.trim(),
            email: document.getElementById('reader-email').value.trim(),
            address: document.getElementById('reader-address').value.trim(),
            status: document.getElementById('reader-status').value
        };

        if (!formData.full_name) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ –§–ò–û —á–∏—Ç–∞—Ç–µ–ª—è', 'error');
            return;
        }

        const readerId = document.getElementById('reader-id').value;
        await this.saveData('readers', formData, readerId);
    }

    async deleteReader(readerId) { await this.deleteData('readers', readerId); }
    deleteReaderHandler() {
        const readerId = document.getElementById('reader-id').value;
        if (readerId) this.deleteReader(parseInt(readerId));
    }

    // –í—ã–¥–∞—á–∏ –∫–Ω–∏–≥
    renderIssues() {
        const container = document.getElementById('issues-container');
        if (!container) return;

        const statusFilter = document.getElementById('filter-status-issues')?.value || '';
        const filteredIssues = this.issues.filter(issue =>
            !statusFilter || issue.status === statusFilter
        );

        this.renderIssuesTableView(container, filteredIssues);
    }

    renderIssuesTableView(container, issues) {
        if (!issues.length) {
            container.innerHTML = '<div class="text-center">–í—ã–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }

        const headers = ['–ö–Ω–∏–≥–∞', '–ß–∏—Ç–∞—Ç–µ–ª—å', '–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏', '–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π –≤–æ–∑–≤—Ä–∞—Ç', '–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç', '–°—Ç–∞—Ç—É—Å', '–î–µ–π—Å—Ç–≤–∏—è'];

        let html = `
            <div class="table-container">
                <table class="table">
                    <thead><tr>${headers.map(h => `<th>${h}</th>`).join('')}</tr></thead>
                    <tbody>
        `;

        issues.forEach(issue => {
            const isOverdue = issue.status === 'overdue';
            const isIssued = issue.status === 'issued';
            const statusClass = 'status-' + issue.status;
            let statusText = this.getIssueStatusText(issue.status);

            if (isOverdue) statusText = '‚è∞ ' + statusText;

            html += `
                <tr>
                    <td><strong>${this.escapeHtml(issue.book_name)}</strong></td>
                    <td>${this.escapeHtml(issue.reader_name)}</td>
                    <td>${new Date(issue.issue_date).toLocaleDateString('ru-RU')}</td>
                    <td class="${isOverdue ? 'text-danger' : ''}">${new Date(issue.planned_return_date).toLocaleDateString('ru-RU')}</td>
                    <td>${issue.actual_return_date ? new Date(issue.actual_return_date).toLocaleDateString('ru-RU') : '-'}</td>
                    <td class="${statusClass}">${statusText}</td>
                    <td>
                        ${isIssued || isOverdue ? `
                            <div class="table-actions">
                                <button class="btn primary small" onclick="app.returnIssue(${issue.id})" title="–ü—Ä–∏–Ω—è—Ç—å –≤–æ–∑–≤—Ä–∞—Ç">
                                    ‚úÖ –í–µ—Ä–Ω—É—Ç—å
                                </button>
                                ${isIssued ? `
                                <button class="btn warning small" onclick="app.markOverdue(${issue.id})" title="–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é">
                                    ‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ
                                </button>
                                ` : ''}
                            </div>
                        ` : '<span class="text-center">-</span>'}
                    </td>
                </tr>
            `;
        });

        html += '</tbody></table></div>';
        container.innerHTML = html;
    }

    getIssueStatusText(status) {
        const statusMap = {
            'issued': '–í—ã–¥–∞–Ω–∞',
            'returned': '–í–æ–∑–≤—Ä–∞—â–µ–Ω–∞',
            'overdue': '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞'
        };
        return statusMap[status] || status;
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
    async exportToExcel() {
        try {
            this.showNotification('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Excel —Ñ–∞–π–ª–∞...', 'info');
            const response = await fetch('/api/issues/export-excel');

            if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞: ${response.status}`);

            await this.downloadFile(response, '–≤—ã–¥–∞—á–∏_–∫–Ω–∏–≥.xlsx');
            this.showNotification('Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω', 'success');
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel: ' + error.message, 'error');
        }
    }

    async markOverdue(issueId) {
        if (!confirm('–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–¥–∞—á—É –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é? –ß–∏—Ç–∞—Ç–µ–ª—é –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω —à—Ç—Ä–∞—Ñ.')) return;

        try {
            await this.apiCall(`/api/issues/${issueId}/mark-overdue`, { method: 'POST' });
            await Promise.all([this.loadIssues(), this.loadReports()]);
            this.showNotification('–í—ã–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è', 'warning');
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏: ' + error.message, 'error');
        }
    }

    async returnIssue(issueId) {
        if (!confirm('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∏–µ–º –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–Ω–∏–≥–∏?')) return;

        try {
            await this.apiCall(`/api/issues/${issueId}/return`, { method: 'POST' });
            await Promise.all([this.loadIssues(), this.loadBooks(), this.loadReaders()]);
            this.showNotification('–í–æ–∑–≤—Ä–∞—Ç –∫–Ω–∏–≥–∏ –ø—Ä–∏–Ω—è—Ç', 'success');
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏–µ–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: ' + error.message, 'error');
        }
    }

    openIssueModal() {
        this.populateIssueSelects();
        const modal = document.getElementById('modal-issue');

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const today = new Date().toISOString().split('T')[0];
        const twoWeeks = new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];

        document.getElementById('issue-date').value = today;
        document.getElementById('issue-return-date').value = twoWeeks;

        modal.classList.remove('hidden');
    }

    closeIssueModal() { this.closeModal('issue'); }

    async populateIssueSelects() {
        if (this.books.length === 0) await this.loadBooks();
        if (this.readers.length === 0) await this.loadReaders();

        const selects = {
            'issue-book': this.books.filter(book => book.count > 0 && book.status === 'available'),
            'issue-reader': this.readers.filter(reader => reader.status === 'active')
        };

        Object.entries(selects).forEach(([selectId, items]) => {
            const select = document.getElementById(selectId);
            select.innerHTML = `<option value="">–í—ã–±–µ—Ä–∏—Ç–µ ${selectId.split('-')[1]}</option>`;

            items.forEach(item => {
                const option = document.createElement('option');
                option.value = item.id;
                const suffix = selectId.includes('book') ? ` (–¥–æ—Å—Ç—É–ø–Ω–æ: ${item.count})` : ` (–∫–Ω–∏–≥ –Ω–∞ —Ä—É–∫–∞—Ö: ${item.books_count})`;
                option.textContent = `${item.name || item.full_name}${suffix}`;
                select.appendChild(option);
            });
        });
    }

    async saveIssue(event) {
        event.preventDefault();

        const formData = {
            book_id: parseInt(document.getElementById('issue-book').value),
            reader_id: parseInt(document.getElementById('issue-reader').value),
            planned_return_date: document.getElementById('issue-return-date').value
        };

        if (!formData.book_id || !formData.reader_id || !formData.planned_return_date) {
            this.showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
            return;
        }

        try {
            await this.apiCall('/api/issues', {
                method: 'POST',
                body: JSON.stringify(formData)
            });

            this.closeIssueModal();
            await Promise.all([this.loadBooks(), this.loadIssues(), this.loadReaders()]);
            this.showNotification('–í—ã–¥–∞—á–∞ –∫–Ω–∏–≥–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞', 'success');
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤—ã–¥–∞—á–∏: ' + error.message, 'error');
        }
    }

    // –û—Ç—á–µ—Ç—ã
    async loadReports() {
        try {
            this.showLoading('reports', true);
            const stats = await this.apiCall('/api/reports/stats');
            this.renderReports(stats);
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–æ–≤: ' + error.message, 'error');
        } finally {
            this.showLoading('reports', false);
        }
    }

    renderReports(stats) {
        const container = document.getElementById('reports-container');
        if (!container) return;

        const statsItems = [
            { label: '–í—Å–µ–≥–æ –∫–Ω–∏–≥:', value: stats.books.total },
            { label: '–î–æ—Å—Ç—É–ø–Ω–æ –∫–Ω–∏–≥:', value: stats.books.available },
            { label: '–í—Å–µ–≥–æ —á–∏—Ç–∞—Ç–µ–ª–µ–π:', value: stats.readers.total },
            { label: '–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π:', value: stats.readers.active },
            { label: '–í—Å–µ–≥–æ –≤—ã–¥–∞—á:', value: stats.issues.total },
            { label: '–¢–µ–∫—É—â–∏—Ö –≤—ã–¥–∞—á:', value: stats.issues.current }
        ];

        let html = `
            <div class="reports-container">
                <div class="report-card">
                    <h3>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                    <div class="stats-grid">
                        ${statsItems.map(item => `
                            <div class="stat-item">
                                <span>${item.label}</span>
                                <span class="stat-value">${item.value}</span>
                            </div>
                        `).join('')}
                    </div>
                </div>

                <div class="report-card">
                    <h3>üìö –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∂–∞–Ω—Ä–∞–º</h3>
                    <div style="height: 300px; position: relative;">
                        <canvas id="genreChart"></canvas>
                    </div>
                </div>
            </div>
        `;

        container.innerHTML = html;
        this.renderGenreChart(stats.genres);
    }

    renderGenreChart(genres) {
        const ctx = document.getElementById('genreChart').getContext('2d');

        if (this.genresChart) {
            this.genresChart.destroy();
        }

        this.genresChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: Object.keys(genres),
                datasets: [{
                    data: Object.values(genres),
                    backgroundColor: [
                        '#3498db', '#e74c3c', '#2ecc71', '#9b59b6',
                        '#f1c40f', '#1abc9c', '#34495e', '#e67e22',
                        '#95a5a6', '#d35400'
                    ],
                    borderWidth: 2,
                    borderColor: '#fff'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'right',
                        labels: {
                            padding: 15,
                            usePointStyle: true,
                            font: { size: 12 }
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const label = context.label || '';
                                const value = context.parsed;
                                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                const percentage = Math.round((value / total) * 100);
                                return `${label}: ${value} (${percentage}%)`;
                            }
                        }
                    }
                }
            }
        });
    }

    // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    createTempRulesButton() {
        console.warn('–°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É –ø—Ä–∞–≤–∏–ª');
        const tempBtn = document.createElement('button');
        tempBtn.id = 'temp-rules-btn';
        tempBtn.textContent = 'üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ (–≤—Ä–µ–º–µ–Ω–Ω–∞—è)';
        tempBtn.style.cssText = 'position:fixed;top:10px;right:10px;z-index:10000;background:#dc3545;color:white;border:none;padding:10px 15px;border-radius:5px;cursor:pointer;';
        tempBtn.addEventListener('click', () => this.downloadRules());
        document.body.appendChild(tempBtn);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let app;
document.addEventListener('DOMContentLoaded', () => {
    app = new LibToolApp();
});